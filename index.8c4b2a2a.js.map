{"mappings":"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MAAM,CAOd,AAtGc,EAsGL,IAAI,CAAC,MAAM,CAAG,GACzB,EAAiB,QAAS,kCAEnB,GAGL,CAAA,AA5Gc,EA4GL,GAAG,CA/MF,IA+MgB,AA5GZ,EA4GqB,GAAG,CA9M5B,EA8M+B,IAC3C,EAAiB,QAAS,uBAAsC,MAAA,CAhNpD,GAgN6C,SAAe,MAAA,CA/M5D,KAiNL,IAdP,EAAiB,QAAS,gCAEnB,EACT,IAhGA,EAAiB,UAAW,+BAkHtB,EAAS,SAAS,aAAa,CAAC,MAEtC,OAAO,OAAO,CAlHA,GAkHO,OAAO,CAAC,SAA7B,CAAA,EAA+B,IAAA,E,A,S,C,E,G,M,O,C,G,O,C,EAAA,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,EAAA,EAAA,I,EAAA,EAAA,I,A,W,M,A,U,6I,IAAA,EAAA,CAAA,CAAA,EAAA,CAAK,EAAL,CAAA,CAAA,EAAA,CACvB,EAAU,SAAS,aAAa,CAAC,KAEvC,CAAA,EAAQ,WAAW,CACjB,AAAQ,WAAR,EAAoB,IAA0B,MAAA,CAAvB,EAAM,cAAc,IAAO,EAEpD,EAAO,WAAW,CAAC,EACrB,GAEA,EAAU,WAAW,CAAC,GA1HxB,GAcA,EAAY,gBAAgB,CAAC,QAAS,SAAC,CAAvC,EACE,IAAM,EAAc,EAAE,MAAM,CAAC,OAAO,CAAC,MAErC,GAAK,GAIL,I,EAAM,EAAc,EAAY,SAAS,CACnC,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAgB,SAAS,gBAAgB,CAAC,c,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,E,I,A,W,M,A,U,wI,IAC1C,EAAQ,SAAS,aAAa,CAAC,QAEjC,CAAA,IAA0B,GAC5B,EAAU,IAAI,CAAC,SAAC,CAAA,CAAM,CAAtB,EACE,IAAM,EAAS,EAAe,EAAM,GAC9B,EAAS,EAAe,EAAM,SAEpC,AAAI,AAAkB,UAAlB,OAAO,GAAuB,AAAkB,UAAlB,OAAO,EAChC,EAAS,EAGd,AAAkB,UAAlB,OAAO,GAAuB,AAAkB,UAAlB,OAAO,EAChC,EAAO,aAAa,CAAC,SAEhC,GAEA,EAAwB,GAExB,EAAU,OAAO,GAGnB,EAAU,OAAO,CAAC,SAAC,CAAnB,EACE,EAAM,WAAW,CAAC,EACpB,GACF,GAEA,EAAU,gBAAgB,CAAC,QAAS,SAAC,CAArC,EACE,IAAM,EAAa,EAAE,MAAM,CAAC,OAAO,CAAC,MAE/B,GAAc,IAAmB,IAIlC,GACF,EAAe,SAAS,CAAC,MAAM,CAAC,UAIlC,AADA,CAAA,EAAiB,CAAjB,EACe,SAAS,CAAC,GAAG,CAAC,UAC/B,GA+DA,EAAU,gBAAgB,CAAC,WAAY,SAAC,CAAxC,EACE,IAAM,EAAc,EAAE,MAAM,CAAC,OAAO,CAAC,MAC/B,EAAgB,EAAY,WAAW,CACvC,EAAY,SAAS,aAAa,CAAC,SAEzC,EAAU,SAAS,CAAC,GAAG,CAAC,cACxB,EAAY,WAAW,CAAG,GAC1B,EAAU,KAAK,CAAG,EAClB,EAAY,WAAW,CAAC,GACxB,EAAU,KAAK,GAEf,EAAU,gBAAgB,CAAC,OAAQ,SAAC,CAApC,EACE,EAAY,WAAW,CAAG,EAAU,KAAK,AAC3C,GAEA,EAAU,gBAAgB,CAAC,WAAY,SAAC,CAAxC,EACyB,UAAnB,EAAW,GAAG,EAChB,EAAU,IAAI,EAElB,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\nvar MIN_AGE = 18;\nvar MAX_AGE = 90;\nvar NOTIFICATION_TIMEOUT = 2000;\nvar tableHeader = document.querySelector(\"thead\");\nvar tableBody = document.querySelector(\"tbody\");\nvar employeeForm = document.createElement(\"form\");\nvar submitButton = document.createElement(\"button\");\nvar lastSortedColumnIndex = null;\nvar activeTableRow = null;\nemployeeForm.classList.add(\"new-employee-form\");\nvar formFields = [\n    {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\"\n    },\n    {\n        label: \"Position\",\n        name: \"position\",\n        type: \"text\"\n    },\n    {\n        label: \"office\",\n        name: \"office\",\n        type: \"select\",\n        options: [\n            \"Tokyo\",\n            \"Singapore\",\n            \"London\",\n            \"New York\",\n            \"Edinburgh\",\n            \"San Francisco\"\n        ]\n    },\n    {\n        label: \"Age\",\n        name: \"age\",\n        type: \"number\",\n        min: 1\n    },\n    {\n        label: \"Salary\",\n        name: \"salary\",\n        type: \"number\",\n        min: 0\n    }\n];\nformFields.forEach(function(field) {\n    var fieldLabel = document.createElement(\"label\");\n    fieldLabel.textContent = \"\".concat(field.label, \": \");\n    var input;\n    if (field.type === \"select\") {\n        input = document.createElement(\"select\");\n        field.options.forEach(function(optionValue) {\n            var option = document.createElement(\"option\");\n            option.value = optionValue;\n            option.textContent = optionValue;\n            input.appendChild(option);\n        });\n    } else {\n        input = document.createElement(\"input\");\n        if (field.min !== undefined) input.setAttribute(\"min\", field.min);\n    }\n    input.setAttribute(\"name\", field.name);\n    input.setAttribute(\"type\", field.type);\n    input.setAttribute(\"data-qa\", field.name);\n    fieldLabel.appendChild(input);\n    employeeForm.appendChild(fieldLabel);\n});\nsubmitButton.textContent = \"Save to table\";\nemployeeForm.appendChild(submitButton);\ndocument.body.appendChild(employeeForm);\nemployeeForm.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    var formData = Array.from(e.target.elements).reduce(function(data, element) {\n        if (element.tagName === \"INPUT\" || element.tagName === \"SELECT\") data[element.name] = isNaN(element.value) ? element.value : parseInt(element.value);\n        return data;\n    }, {});\n    if (!validateForm(formData)) return;\n    pushNotification(\"success\", \"Form submitted successfully\");\n    addRowToTable(formData);\n});\nfunction parseCellValue(row, index) {\n    var cells = row.querySelectorAll(\"td\");\n    if (!cells.length) return \"\";\n    var cleanedCell = cells[index].textContent.trim().replace(/[$,]/g, \"\");\n    return isNaN(cleanedCell) ? cleanedCell : parseInt(cleanedCell);\n}\ntableHeader.addEventListener(\"click\", function(e) {\n    var clickedCell = e.target.closest(\"th\");\n    if (!clickedCell) return;\n    var columnIndex = clickedCell.cellIndex;\n    var tableRows = _to_consumable_array(document.querySelectorAll(\"tbody tr\"));\n    var tbody = document.querySelector(\"tbody\");\n    if (lastSortedColumnIndex !== columnIndex) {\n        tableRows.sort(function(row1, row2) {\n            var value1 = parseCellValue(row1, columnIndex);\n            var value2 = parseCellValue(row2, columnIndex);\n            if (typeof value1 === \"number\" && typeof value2 === \"number\") return value1 - value2;\n            if (typeof value1 === \"string\" && typeof value2 === \"string\") return value1.localeCompare(value2);\n        });\n        lastSortedColumnIndex = columnIndex;\n    } else tableRows.reverse();\n    tableRows.forEach(function(rowData) {\n        tbody.appendChild(rowData);\n    });\n});\ntableBody.addEventListener(\"click\", function(e) {\n    var clickedRow = e.target.closest(\"tr\");\n    if (!clickedRow || activeTableRow === clickedRow) return;\n    if (activeTableRow) activeTableRow.classList.remove(\"active\");\n    activeTableRow = clickedRow;\n    activeTableRow.classList.add(\"active\");\n});\nfunction pushNotification(type, message) {\n    var notificationBlock = document.createElement(\"div\");\n    var title = document.createElement(\"h1\");\n    var phrase = document.createElement(\"p\");\n    notificationBlock.setAttribute(\"data-qa\", \"notification\");\n    notificationBlock.className = \"notification \".concat(type);\n    title.textContent = type[0].toUpperCase() + type.slice(1);\n    phrase.textContent = message[0].toUpperCase() + message.slice(1);\n    notificationBlock.appendChild(title);\n    notificationBlock.appendChild(phrase);\n    document.body.appendChild(notificationBlock);\n    setTimeout(function() {\n        notificationBlock.style.visibility = \"hidden\";\n    }, NOTIFICATION_TIMEOUT);\n}\nfunction validateForm(formData) {\n    if (!formData.name || !formData.position || !formData.age || !formData.salary) {\n        pushNotification(\"error\", \"Each field must be filled in\");\n        return false;\n    }\n    if (formData.name.length < 4) {\n        pushNotification(\"error\", \"Name must be no shorter than 4\");\n        return false;\n    }\n    if (formData.age < MIN_AGE || formData.age > MAX_AGE) {\n        pushNotification(\"error\", \"Age must be between \".concat(MIN_AGE, \" and \").concat(MAX_AGE));\n        return false;\n    }\n    return true;\n}\nfunction addRowToTable(data) {\n    var newRow = document.createElement(\"tr\");\n    Object.entries(data).forEach(function(param) {\n        var _param = _sliced_to_array(param, 2), key = _param[0], value = _param[1];\n        var newCell = document.createElement(\"td\");\n        newCell.textContent = key === \"salary\" ? \"$\".concat(value.toLocaleString()) : value;\n        newRow.appendChild(newCell);\n    });\n    tableBody.appendChild(newRow);\n}\ntableBody.addEventListener(\"dblclick\", function(e) {\n    var clickedCell = e.target.closest(\"td\");\n    var originalValue = clickedCell.textContent;\n    var cellInput = document.createElement(\"input\");\n    cellInput.classList.add(\"cell-input\");\n    clickedCell.textContent = \"\";\n    cellInput.value = originalValue;\n    clickedCell.appendChild(cellInput);\n    cellInput.focus();\n    cellInput.addEventListener(\"blur\", function(inputEvent) {\n        clickedCell.textContent = cellInput.value;\n    });\n    cellInput.addEventListener(\"keypress\", function(inputEvent) {\n        if (inputEvent.key === \"Enter\") cellInput.blur();\n    });\n});\n\n//# sourceMappingURL=index.8c4b2a2a.js.map\n","'use strict';\n\n// write code here\nconst MIN_AGE = 18;\nconst MAX_AGE = 90;\nconst NOTIFICATION_TIMEOUT = 2000;\n\nconst tableHeader = document.querySelector('thead');\nconst tableBody = document.querySelector('tbody');\nconst employeeForm = document.createElement('form');\nconst submitButton = document.createElement('button');\nlet lastSortedColumnIndex = null;\nlet activeTableRow = null;\n\nemployeeForm.classList.add('new-employee-form');\n\nconst formFields = [\n  { label: 'Name', name: 'name', type: 'text' },\n  { label: 'Position', name: 'position', type: 'text' },\n  {\n    label: 'office',\n    name: 'office',\n    type: 'select',\n    options: [\n      'Tokyo',\n      'Singapore',\n      'London',\n      'New York',\n      'Edinburgh',\n      'San Francisco',\n    ],\n  },\n\n  {\n    label: 'Age',\n    name: 'age',\n    type: 'number',\n    min: 1,\n  },\n\n  {\n    label: 'Salary',\n    name: 'salary',\n    type: 'number',\n    min: 0,\n  },\n];\n\nformFields.forEach((field) => {\n  const fieldLabel = document.createElement('label');\n\n  fieldLabel.textContent = `${field.label}: `;\n\n  let input;\n\n  if (field.type === 'select') {\n    input = document.createElement('select');\n\n    field.options.forEach((optionValue) => {\n      const option = document.createElement('option');\n\n      option.value = optionValue;\n      option.textContent = optionValue;\n\n      input.appendChild(option);\n    });\n  } else {\n    input = document.createElement('input');\n\n    if (field.min !== undefined) {\n      input.setAttribute('min', field.min);\n    }\n  }\n\n  input.setAttribute('name', field.name);\n  input.setAttribute('type', field.type);\n  input.setAttribute('data-qa', field.name);\n\n  fieldLabel.appendChild(input);\n\n  employeeForm.appendChild(fieldLabel);\n});\n\nsubmitButton.textContent = 'Save to table';\n\nemployeeForm.appendChild(submitButton);\n\ndocument.body.appendChild(employeeForm);\n\nemployeeForm.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const formData = Array.from(e.target.elements).reduce((data, element) => {\n    if (element.tagName === 'INPUT' || element.tagName === 'SELECT') {\n      data[element.name] = isNaN(element.value)\n        ? element.value\n        : parseInt(element.value);\n    }\n\n    return data;\n  }, {});\n\n  if (!validateForm(formData)) {\n    return;\n  }\n\n  pushNotification('success', 'Form submitted successfully');\n\n  addRowToTable(formData);\n});\n\nfunction parseCellValue(row, index) {\n  const cells = row.querySelectorAll('td');\n\n  if (!cells.length) {\n    return '';\n  }\n\n  const cleanedCell = cells[index].textContent.trim().replace(/[$,]/g, '');\n\n  return isNaN(cleanedCell) ? cleanedCell : parseInt(cleanedCell);\n}\n\ntableHeader.addEventListener('click', (e) => {\n  const clickedCell = e.target.closest('th');\n\n  if (!clickedCell) {\n    return;\n  }\n\n  const columnIndex = clickedCell.cellIndex;\n  const tableRows = [...document.querySelectorAll('tbody tr')];\n  const tbody = document.querySelector('tbody');\n\n  if (lastSortedColumnIndex !== columnIndex) {\n    tableRows.sort((row1, row2) => {\n      const value1 = parseCellValue(row1, columnIndex);\n      const value2 = parseCellValue(row2, columnIndex);\n\n      if (typeof value1 === 'number' && typeof value2 === 'number') {\n        return value1 - value2;\n      }\n\n      if (typeof value1 === 'string' && typeof value2 === 'string') {\n        return value1.localeCompare(value2);\n      }\n    });\n\n    lastSortedColumnIndex = columnIndex;\n  } else {\n    tableRows.reverse();\n  }\n\n  tableRows.forEach((rowData) => {\n    tbody.appendChild(rowData);\n  });\n});\n\ntableBody.addEventListener('click', (e) => {\n  const clickedRow = e.target.closest('tr');\n\n  if (!clickedRow || activeTableRow === clickedRow) {\n    return;\n  }\n\n  if (activeTableRow) {\n    activeTableRow.classList.remove('active');\n  }\n\n  activeTableRow = clickedRow;\n  activeTableRow.classList.add('active');\n});\n\nfunction pushNotification(type, message) {\n  const notificationBlock = document.createElement('div');\n  const title = document.createElement('h1');\n  const phrase = document.createElement('p');\n\n  notificationBlock.setAttribute('data-qa', 'notification');\n  notificationBlock.className = `notification ${type}`;\n  title.textContent = type[0].toUpperCase() + type.slice(1);\n  phrase.textContent = message[0].toUpperCase() + message.slice(1);\n\n  notificationBlock.appendChild(title);\n  notificationBlock.appendChild(phrase);\n  document.body.appendChild(notificationBlock);\n\n  setTimeout(() => {\n    notificationBlock.style.visibility = 'hidden';\n  }, NOTIFICATION_TIMEOUT);\n}\n\nfunction validateForm(formData) {\n  if (\n    !formData.name ||\n    !formData.position ||\n    !formData.age ||\n    !formData.salary\n  ) {\n    pushNotification('error', 'Each field must be filled in');\n\n    return false;\n  }\n\n  if (formData.name.length < 4) {\n    pushNotification('error', 'Name must be no shorter than 4');\n\n    return false;\n  }\n\n  if (formData.age < MIN_AGE || formData.age > MAX_AGE) {\n    pushNotification('error', `Age must be between ${MIN_AGE} and ${MAX_AGE}`);\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction addRowToTable(data) {\n  const newRow = document.createElement('tr');\n\n  Object.entries(data).forEach(([key, value]) => {\n    const newCell = document.createElement('td');\n\n    newCell.textContent =\n      key === 'salary' ? `$${value.toLocaleString()}` : value;\n\n    newRow.appendChild(newCell);\n  });\n\n  tableBody.appendChild(newRow);\n}\n\ntableBody.addEventListener('dblclick', (e) => {\n  const clickedCell = e.target.closest('td');\n  const originalValue = clickedCell.textContent;\n  const cellInput = document.createElement('input');\n\n  cellInput.classList.add('cell-input');\n  clickedCell.textContent = '';\n  cellInput.value = originalValue;\n  clickedCell.appendChild(cellInput);\n  cellInput.focus();\n\n  cellInput.addEventListener('blur', (inputEvent) => {\n    clickedCell.textContent = cellInput.value;\n  });\n\n  cellInput.addEventListener('keypress', (inputEvent) => {\n    if (inputEvent.key === 'Enter') {\n      cellInput.blur();\n    }\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","tableHeader","document","querySelector","tableBody","employeeForm","createElement","submitButton","lastSortedColumnIndex","activeTableRow","parseCellValue","row","index","cells","querySelectorAll","cleanedCell","textContent","trim","replace","isNaN","parseInt","pushNotification","type","message","notificationBlock","title","phrase","setAttribute","className","concat","toUpperCase","appendChild","body","setTimeout","style","visibility","classList","add","formFields","label","options","min","forEach","field","input","fieldLabel","optionValue","option","value","undefined","addEventListener","e","preventDefault","newRow","formData","target","elements","reduce","data","element","tagName","position","age","salary","entries","param","_param","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","next","done","push","err","_non_iterable_rest","TypeError","key","newCell","toLocaleString","clickedCell","closest","columnIndex","cellIndex","tableRows","_array_without_holes","_iterable_to_array","iter","_non_iterable_spread","tbody","sort","row1","row2","value1","value2","localeCompare","reverse","rowData","clickedRow","remove","originalValue","cellInput","focus","inputEvent","blur"],"version":3,"file":"index.8c4b2a2a.js.map"}